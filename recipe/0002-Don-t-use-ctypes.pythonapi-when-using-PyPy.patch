From f6d13d8ad3ac68f86d5a94d208c45ca76aa9c7a8 Mon Sep 17 00:00:00 2001
From: Hyunsu Cho <chohyu01@cs.washington.edu>
Date: Tue, 31 Oct 2023 12:21:07 -0700
Subject: [PATCH] Don't use ctypes.pythonapi when using PyPy

---
 python/treelite/model.py | 26 ++++++++++++++++++--------
 1 file changed, 18 insertions(+), 8 deletions(-)

diff --git a/python/treelite/model.py b/python/treelite/model.py
index ea09342..c5e7306 100644
--- a/python/treelite/model.py
+++ b/python/treelite/model.py
@@ -4,6 +4,7 @@ from __future__ import annotations
 
 import ctypes
 import pathlib
+import platform
 import warnings
 from typing import Any, List, Optional, Union
 
@@ -419,17 +420,20 @@ class _PyBuffer(ctypes.Structure):  # pylint: disable=R0902,R0903
     )
 
 
-ctypes.pythonapi.PyMemoryView_FromBuffer.argtypes = [ctypes.POINTER(_PyBuffer)]
-ctypes.pythonapi.PyMemoryView_FromBuffer.restype = ctypes.py_object
-ctypes.pythonapi.PyObject_GetBuffer.argtypes = [
-    ctypes.py_object,
-    ctypes.POINTER(_PyBuffer),
-    ctypes.c_int,
-]
-ctypes.pythonapi.PyObject_GetBuffer.restype = ctypes.c_int
+if platform.python_implementation() == "CPython":
+    ctypes.pythonapi.PyMemoryView_FromBuffer.argtypes = [ctypes.POINTER(_PyBuffer)]
+    ctypes.pythonapi.PyMemoryView_FromBuffer.restype = ctypes.py_object
+    ctypes.pythonapi.PyObject_GetBuffer.argtypes = [
+        ctypes.py_object,
+        ctypes.POINTER(_PyBuffer),
+        ctypes.c_int,
+    ]
+    ctypes.pythonapi.PyObject_GetBuffer.restype = ctypes.c_int
 
 
 def _pybuffer2numpy(frame: _TreelitePyBufferFrame) -> np.ndarray:
+    if platform.python_implementation() != "CPython":
+        raise NotImplementedError("_pybuffer2numpy() not supported on PyPy")
     if not frame.buf:
         if frame.format == b"=l":
             dtype = "int32"
@@ -466,6 +470,8 @@ def _pybuffer2numpy(frame: _TreelitePyBufferFrame) -> np.ndarray:
 
 
 def _numpy2pybuffer(array: np.ndarray) -> _TreelitePyBufferFrame:
+    if platform.python_implementation() != "CPython":
+        raise NotImplementedError("_numpy2pybuffer() not supported on PyPy")
     if len(array.shape) != 1:
         raise ValueError("Cannot handle NumPy array that has more than 1 dimension")
     view: memoryview = array.data
@@ -516,6 +522,8 @@ class HeaderAccessor:
             Value in the field
             (``str`` for a string field, ``np.ndarray`` for other fields)
         """
+        if platform.python_implementation() != "CPython":
+            raise NotImplementedError("get_field() not supported on PyPy")
         obj = _TreelitePyBufferFrame()
         _check_call(
             _LIB.TreeliteGetHeaderField(
@@ -542,6 +550,8 @@ class HeaderAccessor:
             New value for the field
             (``str`` for a string field, ``np.ndarray`` for other fields)
         """
+        if platform.python_implementation() != "CPython":
+            raise NotImplementedError("set_field() not supported on PyPy")
         if isinstance(value, str):
             value = np.frombuffer(value.encode("utf-8"), dtype="S1")
         _check_call(
-- 
2.42.0

